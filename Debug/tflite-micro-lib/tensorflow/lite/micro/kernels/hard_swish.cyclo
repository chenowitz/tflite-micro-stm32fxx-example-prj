instrumentation.h:195:3:ruy::profiler::ScopeLabel::~ScopeLabel()	1
limits:525:7:static constexpr signed char std::numeric_limits<signed char>::min()	1
limits:528:7:static constexpr signed char std::numeric_limits<signed char>::max()	1
limits:595:7:static constexpr unsigned char std::numeric_limits<unsigned char>::min()	1
limits:598:7:static constexpr unsigned char std::numeric_limits<unsigned char>::max()	1
limits:925:7:static constexpr short int std::numeric_limits<short int>::min()	1
limits:928:7:static constexpr short int std::numeric_limits<short int>::max()	1
limits:1207:7:static constexpr long int std::numeric_limits<long int>::max()	1
fixedpoint.h:342:21:IntegerType gemmlowp::SaturatingRoundingDoublingHighMul(IntegerType, IntegerType) [with IntegerType = short int]	6
types.h:137:3:tflite::RuntimeShape::RuntimeShape()	1
types.h:156:3:tflite::RuntimeShape::RuntimeShape(int, const int32*)	1
types.h:178:3:tflite::RuntimeShape::~RuntimeShape()	3
types.h:188:16:int32 tflite::RuntimeShape::DimensionsCount() const	1
types.h:189:16:int32 tflite::RuntimeShape::Dims(int) const	2
types.h:204:17:int32* tflite::RuntimeShape::DimsData()	2
types.h:207:23:const int32* tflite::RuntimeShape::DimsData() const	2
types.h:213:15:void tflite::RuntimeShape::Resize(int)	5
types.h:231:15:void tflite::RuntimeShape::ReplaceWith(int, const int32*)	1
types.h:265:14:int tflite::RuntimeShape::FlatSize() const	2
types.h:481:12:int tflite::MatchingFlatSize(const tflite::RuntimeShape&, const tflite::RuntimeShape&)	2
common.h:417:13:void tflite::DownScaleInt32ToInt16Multiplier(int32_t, int16_t*)	2
hard_swish.h:25:16:int16_t tflite::reference_ops::SaturatingLeftShift(int16_t, int)	1
hard_swish.h:35:21:int16_t tflite::reference_ops::SaturatingDoublingHighMul(int16_t, int16_t)	5
tensor_ctypes.h:34:21:tflite::RuntimeShape tflite::GetTensorShape(const TfLiteTensor*)	2
kernel_util.h:31:28:const TfLiteTensor* tflite::GetInput(const TfLiteContext*, const TfLiteNode*, int)	1
kernel_util.h:43:22:TfLiteTensor* tflite::GetOutput(TfLiteContext*, const TfLiteNode*, int)	1
kernel_util.h:60:12:int tflite::NumInputs(const TfLiteNode*)	1
kernel_util.h:61:12:int tflite::NumOutputs(const TfLiteNode*)	1
hard_swish.cc:36:7:void* tflite::ops::micro::hard_swish::HardSwishInit(TfLiteContext*, const char*, size_t)	2
hard_swish.cc:45:14:TfLiteStatus tflite::ops::micro::hard_swish::HardSwishPrepare(TfLiteContext*, TfLiteNode*)	6
hard_swish.cc:88:14:TfLiteStatus tflite::ops::micro::hard_swish::HardSwishEval(TfLiteContext*, TfLiteNode*)	5
hard_swish.cc:121:20:TfLiteRegistration tflite::ops::micro::Register_HARD_SWISH()	1
stl_algobase.h:254:5:constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long int]	2
stl_algobase.h:230:5:constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long int]	2
tensor_ctypes.h:29:17:const T* tflite::GetTensorData(const TfLiteTensor*) [with T = float]	2
tensor_ctypes.h:24:11:T* tflite::GetTensorData(TfLiteTensor*) [with T = float]	2
hard_swish.h:45:13:void tflite::reference_ops::HardSwish(const tflite::RuntimeShape&, const T*, const tflite::RuntimeShape&, T*) [with T = float]	2
tensor_ctypes.h:29:17:const T* tflite::GetTensorData(const TfLiteTensor*) [with T = unsigned char]	2
tensor_ctypes.h:24:11:T* tflite::GetTensorData(TfLiteTensor*) [with T = unsigned char]	2
hard_swish.h:59:13:void tflite::reference_ops::HardSwish(const tflite::HardSwishParams&, const tflite::RuntimeShape&, const T*, const tflite::RuntimeShape&, T*) [with T = unsigned char]	5
tensor_ctypes.h:29:17:const T* tflite::GetTensorData(const TfLiteTensor*) [with T = signed char]	2
tensor_ctypes.h:24:11:T* tflite::GetTensorData(TfLiteTensor*) [with T = signed char]	2
hard_swish.h:59:13:void tflite::reference_ops::HardSwish(const tflite::HardSwishParams&, const tflite::RuntimeShape&, const T*, const tflite::RuntimeShape&, T*) [with T = signed char]	5
stl_algobase.h:254:5:constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = float]	2
stl_algobase.h:230:5:constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = float]	2
instrumentation.h:191:12:) [with Args = {const char*}]	1
fixedpoint.h:357:20:IntegerType gemmlowp::RoundingDivideByPOT(IntegerType, int) [with IntegerType = short int]	1
stl_algobase.h:230:5:constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = short int]	2
stl_algobase.h:254:5:constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = short int]	2
fixedpoint.h:64:10:tRawType gemmlowp::Dup(typename gemmlowp::FixedPointRawTypeTraits<tRawType>::ScalarRawType) [with tRawType = short int]	1
fixedpoint.h:70:14:tIntegerType gemmlowp::BitAnd(tIntegerType, tIntegerType) [with tIntegerType = short int]	1
fixedpoint.h:140:14:tIntegerType gemmlowp::ShiftRight(tIntegerType, int) [with tIntegerType = short int]	1
fixedpoint.h:199:14:tIntegerType gemmlowp::MaskIfLessThan(tIntegerType, tIntegerType) [with tIntegerType = short int]	1
fixedpoint.h:94:14:tIntegerType gemmlowp::Add(tIntegerType, tIntegerType) [with tIntegerType = short int]	1
fixedpoint.h:185:14:tIntegerType gemmlowp::MaskIfGreaterThan(tIntegerType, tIntegerType) [with tIntegerType = short int]	1
fixedpoint.h:156:14:tIntegerType gemmlowp::MaskIfNonZero(tIntegerType) [with tIntegerType = short int]	2
fixedpoint.h:88:14:tIntegerType gemmlowp::BitNot(tIntegerType) [with tIntegerType = short int]	1
